{"ast":null,"code":"import _objectSpread from\"/Users/rhendren/Desktop/text/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useQuery,queryCache}from\"react-query\";import{apiRequest}from\"./util\";/**** USERS ****/ // Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid){// Unique cache key for this query\nvar cacheKey=[\"user\",{uid:uid}];// Query for fetching user\nvar query=function query(){return apiRequest(\"user-get?uid=\".concat(uid));};// Fetch with react-query (only if we have a uid)\n// Docs: https://react-query.tanstack.com/docs/guides/queries\nreturn useQuery(cacheKey,query,{enabled:!!uid});}// Update an existing user\nexport function updateUser(uid,data){// Send API request\nreturn apiRequest(\"user-update?uid=\".concat(uid),\"PATCH\",data).then(function(user){var cacheKey=[\"user\",{uid:uid}];// Update user in cache (causing components to re-render with new data)\nqueryCache.setQueryData(cacheKey,user);// Return the updated user\nreturn user;});}// Create a new user\nexport function createUser(uid,data){return apiRequest(\"user-create\",\"POST\",_objectSpread({uid:uid},data));}/**** ITEMS ****/ /* Example query functions (modify to your needs) */ // Fetch all items by owner (hook)\nexport function useItemsByOwner(owner){// Unique cache key for this query\nvar cacheKey=[\"items\",{owner:owner}];// Query for fetching items\nvar query=function query(){return apiRequest(\"items-get?owner=\".concat(owner));};// Fetch data with react-query (only if we have an owner)\n// Docs: https://react-query.tanstack.com/docs/guides/queries\nreturn useQuery(cacheKey,query,{enabled:!!owner});}// Fetch item data\nexport function useItem(id){// Unique cache key for this query\nvar cacheKey=[\"item\",{id:id}];// Query for fetching item\nvar query=function query(){return apiRequest(\"item-get?id=\".concat(id));};// Fetch data with react-query (only if we have an id)\n// Docs: https://react-query.tanstack.com/docs/guides/queries\nreturn useQuery(cacheKey,query,{enabled:!!id});}// Update an item\nexport function updateItem(id,data){// Send API request\nreturn apiRequest(\"item-update?id=\".concat(id),\"PATCH\",data).then(function(item){var cacheKey=[\"item\",{id:item.id}];// Update item in cache\nqueryCache.setQueryData(cacheKey,item);// Invalidate existing query for items by owner so that it will\n// be refetched next time and include updated item.\nqueryCache.invalidateQueries([\"items\",{owner:item.owner}]);return item;});}// Create a new item\nexport function createItem(data){return apiRequest(\"item-create\",\"POST\",data).then(function(item){// Invalidate existing query for items by owner so that it will\n// be refetched next time and include new item.\nqueryCache.invalidateQueries([\"items\",{owner:item.owner}]);return item;});}","map":{"version":3,"sources":["/Users/rhendren/Desktop/text/src/util/db.js"],"names":["useQuery","queryCache","apiRequest","useUser","uid","cacheKey","query","enabled","updateUser","data","then","user","setQueryData","createUser","useItemsByOwner","owner","useItem","id","updateItem","item","invalidateQueries","createItem"],"mappings":"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","sourcesContent":["import { useQuery, queryCache } from \"react-query\";\nimport { apiRequest } from \"./util\";\n\n/**** USERS ****/\n\n// Fetch user data (hook)\n// This is called automatically by auth.js and merged into auth.user\nexport function useUser(uid) {\n  // Unique cache key for this query\n  const cacheKey = [\"user\", { uid }];\n  // Query for fetching user\n  const query = () => apiRequest(`user-get?uid=${uid}`);\n  // Fetch with react-query (only if we have a uid)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!uid });\n}\n\n// Update an existing user\nexport function updateUser(uid, data) {\n  // Send API request\n  return apiRequest(`user-update?uid=${uid}`, \"PATCH\", data).then((user) => {\n    const cacheKey = [\"user\", { uid }];\n    // Update user in cache (causing components to re-render with new data)\n    queryCache.setQueryData(cacheKey, user);\n    // Return the updated user\n    return user;\n  });\n}\n\n// Create a new user\nexport function createUser(uid, data) {\n  return apiRequest(\"user-create\", \"POST\", { uid, ...data });\n}\n\n/**** ITEMS ****/\n/* Example query functions (modify to your needs) */\n\n// Fetch all items by owner (hook)\nexport function useItemsByOwner(owner) {\n  // Unique cache key for this query\n  const cacheKey = [\"items\", { owner }];\n  // Query for fetching items\n  const query = () => apiRequest(`items-get?owner=${owner}`);\n  // Fetch data with react-query (only if we have an owner)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!owner });\n}\n\n// Fetch item data\nexport function useItem(id) {\n  // Unique cache key for this query\n  const cacheKey = [\"item\", { id }];\n  // Query for fetching item\n  const query = () => apiRequest(`item-get?id=${id}`);\n  // Fetch data with react-query (only if we have an id)\n  // Docs: https://react-query.tanstack.com/docs/guides/queries\n  return useQuery(cacheKey, query, { enabled: !!id });\n}\n\n// Update an item\nexport function updateItem(id, data) {\n  // Send API request\n  return apiRequest(`item-update?id=${id}`, \"PATCH\", data).then((item) => {\n    const cacheKey = [\"item\", { id: item.id }];\n    // Update item in cache\n    queryCache.setQueryData(cacheKey, item);\n    // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include updated item.\n    queryCache.invalidateQueries([\"items\", { owner: item.owner }]);\n    return item;\n  });\n}\n\n// Create a new item\nexport function createItem(data) {\n  return apiRequest(\"item-create\", \"POST\", data).then((item) => {\n    // Invalidate existing query for items by owner so that it will\n    // be refetched next time and include new item.\n    queryCache.invalidateQueries([\"items\", { owner: item.owner }]);\n    return item;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from\"/Users/rhendren/Desktop/text/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import CheckField from\"./CheckField\";import FormField from\"./FormField\";import SectionButton from\"./SectionButton\";import{useAuth}from\"./../util/auth.js\";import{useForm}from\"react-hook-form\";function DashboardSms(props){var auth=useAuth();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pending=_useState2[0],setPending=_useState2[1];var customers=[[\"Name\",\"Number\",\"Pizza Topping\",\"Favorite Color\"],[\"Rylie\",2624243872,[\"Pepperoni\"],[\"Blue\",\"Red\"]],[\"Jordan\",6309010523,[\"Pepperoni\",\"Sausage\"],[\"Blue\"]]];var questions=customers[0];var numbers=[2624243872,6309010523];if(auth.user.stripeSubscriptionId){// Load questions and answers from DB api\ncustomers=[[\"Name\",\"Number\",\"Pizza Topping\",\"Favorite Color\"],[\"Rylie\",2624243872,[\"Pepperoni\"],[\"Yellow\"]]];questions=customers[0];// Create db function to get questions and not include phone\nnumbers=[2624243872];// Create db function to get phone numbers by filters\n}var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors,reset=_useForm.reset,getValues=_useForm.getValues;var onSubmit=function onSubmit(data){// Show pending indicator\nsetPending(true);// Check Stripe account for if paid\n// If paid generate charge and ask if successful\n// Then check format of message data\n// Then send message\n// Then ask if successful\nauth.updatePassword(data.pass).then(function(){// Clear form\nreset();// Set success status\nprops.onStatus({type:\"success\",message:\"Your password has been updated\"});})// Maybe also catch error for needing a subscription?\n.catch(function(error){if(error.code===\"auth/requires-recent-login\"){// Update state to show re-authentication modal\nprops.onStatus({type:\"requires-recent-login\",// Resubmit after reauth flow\ncallback:function callback(){return onSubmit({pass:data.pass});}});}else{// Set error status\nprops.onStatus({type:\"error\",message:error.message});}}).finally(function(){// Hide pending indicator\nsetPending(false);});};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit(onSubmit)},questions.map(function(question){return/*#__PURE__*/React.createElement(CheckField,{id:1,name:question,label:question+\" Answers\",error:errors.question,inputRef:register({required:\"Please select one or all.\"}),options:[1,2,3]});}),/*#__PURE__*/React.createElement(FormField,{name:\"message\",type:\"textarea\",label:\"Please enter your SMS\",placeholder:\"Write to your people\",error:errors.message,inputRef:register({required:\"Please enter your text message to send!\"})}),/*#__PURE__*/React.createElement(\"div\",{className:\"field\"},/*#__PURE__*/React.createElement(\"div\",{className:\"control\"},/*#__PURE__*/React.createElement(SectionButton,{parentColor:props.parentColor,size:\"medium\",state:pending?\"loading\":\"normal\"},\"Send\"))));}export default DashboardSms;","map":{"version":3,"sources":["/Users/rhendren/Desktop/text/src/components/DashboardSms.js"],"names":["React","useState","CheckField","FormField","SectionButton","useAuth","useForm","DashboardSms","props","auth","pending","setPending","customers","questions","numbers","user","stripeSubscriptionId","register","handleSubmit","errors","reset","getValues","onSubmit","data","updatePassword","pass","then","onStatus","type","message","catch","error","code","callback","finally","map","question","required","parentColor"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\nimport { useAuth } from \"./../util/auth.js\";\nimport { useForm } from \"react-hook-form\";\n\nfunction DashboardSms(props) {\n  const auth = useAuth();\n  const [pending, setPending] = useState(false);\n  let customers = [\n    [\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"],\n    [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Blue\", \"Red\"]],\n    [\"Jordan\", 6309010523, [\"Pepperoni\", \"Sausage\"], [\"Blue\"]],\n  ];\n  let questions = customers[0];\n  let numbers = [2624243872, 6309010523];\n\n  if (auth.user.stripeSubscriptionId) {\n    // Load questions and answers from DB api\n    customers = [\n      [\"Name\", \"Number\", \"Pizza Topping\", \"Favorite Color\"],\n      [\"Rylie\", 2624243872, [\"Pepperoni\"], [\"Yellow\"]],\n    ];\n    questions = customers[0]; // Create db function to get questions and not include phone\n    numbers = [2624243872]; // Create db function to get phone numbers by filters\n  }\n\n  const { register, handleSubmit, errors, reset, getValues } = useForm();\n\n  const onSubmit = (data) => {\n    // Show pending indicator\n    setPending(true);\n\n    // Check Stripe account for if paid\n    // If paid generate charge and ask if successful\n    // Then check format of message data\n    // Then send message\n    // Then ask if successful\n    auth\n      .updatePassword(data.pass)\n      .then(() => {\n        // Clear form\n        reset();\n        // Set success status\n        props.onStatus({\n          type: \"success\",\n          message: \"Your password has been updated\",\n        });\n      })\n      // Maybe also catch error for needing a subscription?\n      .catch((error) => {\n        if (error.code === \"auth/requires-recent-login\") {\n          // Update state to show re-authentication modal\n          props.onStatus({\n            type: \"requires-recent-login\",\n            // Resubmit after reauth flow\n            callback: () => onSubmit({ pass: data.pass }),\n          });\n        } else {\n          // Set error status\n          props.onStatus({\n            type: \"error\",\n            message: error.message,\n          });\n        }\n      })\n      .finally(() => {\n        // Hide pending indicator\n        setPending(false);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      {questions.map((question) => (\n        <CheckField\n          id={1}\n          name={question}\n          label={question + \" Answers\"}\n          error={errors.question}\n          inputRef={register({\n            required: \"Please select one or all.\",\n          })}\n          options={[1, 2, 3]}\n        />\n      ))}\n\n      <FormField\n        name=\"message\"\n        type=\"textarea\"\n        label=\"Please enter your SMS\"\n        placeholder=\"Write to your people\"\n        error={errors.message}\n        inputRef={register({\n          required: \"Please enter your text message to send!\",\n        })}\n      />\n      <div className=\"field\">\n        <div className=\"control\">\n          <SectionButton\n            parentColor={props.parentColor}\n            size=\"medium\"\n            state={pending ? \"loading\" : \"normal\"}\n          >\n            Send\n          </SectionButton>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default DashboardSms;\n"]},"metadata":{},"sourceType":"module"}